[{"/home/parshwa/Downloads/project/Money-tracker-main/src/index.js":"1","/home/parshwa/Downloads/project/Money-tracker-main/src/App.js":"2","/home/parshwa/Downloads/project/Money-tracker-main/src/context/AuthContext.js":"3","/home/parshwa/Downloads/project/Money-tracker-main/src/Dashboard.jsx":"4","/home/parshwa/Downloads/project/Money-tracker-main/src/components/SignUp/Signup.jsx":"5","/home/parshwa/Downloads/project/Money-tracker-main/src/components/Login/Login.jsx":"6","/home/parshwa/Downloads/project/Money-tracker-main/src/Firebase.js":"7","/home/parshwa/Downloads/project/Money-tracker-main/src/styles.js":"8","/home/parshwa/Downloads/project/Money-tracker-main/src/components/index.js":"9","/home/parshwa/Downloads/project/Money-tracker-main/src/components/InfoCard.jsx":"10","/home/parshwa/Downloads/project/Money-tracker-main/src/components/Details/Details.jsx":"11","/home/parshwa/Downloads/project/Money-tracker-main/src/components/Main/Main.jsx":"12","/home/parshwa/Downloads/project/Money-tracker-main/src/components/Snackbar/Snackbar.jsx":"13","/home/parshwa/Downloads/project/Money-tracker-main/src/components/Snackbar/styles.js":"14","/home/parshwa/Downloads/project/Money-tracker-main/src/components/Main/styles.js":"15","/home/parshwa/Downloads/project/Money-tracker-main/src/components/Details/styles.js":"16","/home/parshwa/Downloads/project/Money-tracker-main/src/useTransactions.js":"17","/home/parshwa/Downloads/project/Money-tracker-main/src/components/Main/List/List.jsx":"18","/home/parshwa/Downloads/project/Money-tracker-main/src/components/Main/Form/Form.jsx":"19","/home/parshwa/Downloads/project/Money-tracker-main/src/constants/categories.js":"20","/home/parshwa/Downloads/project/Money-tracker-main/src/components/Main/List/styles.js":"21","/home/parshwa/Downloads/project/Money-tracker-main/src/components/Main/Form/styles.js":"22","/home/parshwa/Downloads/project/Money-tracker-main/src/utils/formatDate.js":"23"},{"size":335,"mtime":1657209536000,"results":"24","hashOfConfig":"25"},{"size":631,"mtime":1657209536000,"results":"26","hashOfConfig":"25"},{"size":1261,"mtime":1657209536000,"results":"27","hashOfConfig":"25"},{"size":1591,"mtime":1657209536000,"results":"28","hashOfConfig":"25"},{"size":1587,"mtime":1657209536000,"results":"29","hashOfConfig":"25"},{"size":1545,"mtime":1657209536000,"results":"30","hashOfConfig":"25"},{"size":530,"mtime":1657209536000,"results":"31","hashOfConfig":"25"},{"size":552,"mtime":1657209536000,"results":"32","hashOfConfig":"25"},{"size":212,"mtime":1657209536000,"results":"33","hashOfConfig":"25"},{"size":443,"mtime":1657209536000,"results":"34","hashOfConfig":"25"},{"size":701,"mtime":1657209536000,"results":"35","hashOfConfig":"25"},{"size":2251,"mtime":1657209536000,"results":"36","hashOfConfig":"25"},{"size":768,"mtime":1657209536000,"results":"37","hashOfConfig":"25"},{"size":196,"mtime":1657209536000,"results":"38","hashOfConfig":"25"},{"size":490,"mtime":1657209536000,"results":"39","hashOfConfig":"25"},{"size":237,"mtime":1657209536000,"results":"40","hashOfConfig":"25"},{"size":1585,"mtime":1657209536000,"results":"41","hashOfConfig":"25"},{"size":2094,"mtime":1657209536000,"results":"42","hashOfConfig":"25"},{"size":6031,"mtime":1657209536000,"results":"43","hashOfConfig":"25"},{"size":1660,"mtime":1657209536000,"results":"44","hashOfConfig":"25"},{"size":399,"mtime":1657209536000,"results":"45","hashOfConfig":"25"},{"size":235,"mtime":1657209536000,"results":"46","hashOfConfig":"25"},{"size":290,"mtime":1657209536000,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"t2hwj5",{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97"},"/home/parshwa/Downloads/project/Money-tracker-main/src/index.js",[],"/home/parshwa/Downloads/project/Money-tracker-main/src/App.js",[],"/home/parshwa/Downloads/project/Money-tracker-main/src/context/AuthContext.js",[],"/home/parshwa/Downloads/project/Money-tracker-main/src/Dashboard.jsx",["98","99","100","101"],"import React, { useEffect, useRef } from 'react';\nimport { Grid } from '@material-ui/core';\nimport { SpeechState, useSpeechContext } from \"@speechly/react-client\";\nimport { PushToTalkButton, PushToTalkButtonContainer } from '@speechly/react-ui';\n\nimport { Details, Main } from './components';\nimport useStyles from './styles';\n\nconst Dashboard = () => {\n    const classes = useStyles();\n    const { speechState } = useSpeechContext();\n    const main = useRef(null)\n\n    const executeScroll = () => main.current.scrollIntoView()\n\n    // useEffect(() => {\n    //   if (speechState === speechState.Recording) {\n    //     executeScroll();\n    //   }\n    // }, [speechState]);\n    return (\n        <div>\n            <Grid className={classes.grid} container spacing={0} alignItems=\"center\" justifyContent=\"center\" style={{ height: '100vh' }}>\n                <Grid item xs={12} sm={4} className={classes.mobile}>\n                    <Details title=\"Income\" />\n                </Grid>\n                <Grid ref={main} item xs={12} sm={3} className={classes.main}>\n                    <Main />\n                </Grid>\n                <Grid item xs={12} sm={4} className={classes.desktop}>\n                    <Details title=\"Income\" />\n                </Grid>\n                <Grid item xs={12} sm={4} className={classes.last}>\n                    <Details title=\"Expense\" />\n                </Grid>\n                <PushToTalkButtonContainer>\n                    <PushToTalkButton />\n                </PushToTalkButtonContainer>\n            </Grid>\n        </div>\n    )\n}\n\nexport default Dashboard","/home/parshwa/Downloads/project/Money-tracker-main/src/components/SignUp/Signup.jsx",[],"/home/parshwa/Downloads/project/Money-tracker-main/src/components/Login/Login.jsx",[],"/home/parshwa/Downloads/project/Money-tracker-main/src/Firebase.js",[],"/home/parshwa/Downloads/project/Money-tracker-main/src/styles.js",[],"/home/parshwa/Downloads/project/Money-tracker-main/src/components/index.js",[],"/home/parshwa/Downloads/project/Money-tracker-main/src/components/InfoCard.jsx",[],"/home/parshwa/Downloads/project/Money-tracker-main/src/components/Details/Details.jsx",[],"/home/parshwa/Downloads/project/Money-tracker-main/src/components/Main/Main.jsx",["102"],"import React, { useState } from 'react';\nimport { Card, CardHeader, CardContent, Typography, Grid, Divider, Button } from '@material-ui/core';\nimport useStyles from './styles';\nimport Form from './Form/Form';\nimport List from './List/List';\nimport InfoCard from '../InfoCard';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../../context/AuthContext';\n\nconst ExpenseTracker = () => {\n  const navigate = useNavigate();\n  const classes = useStyles();\n  const { logout, currentUser } = useAuth();\n  const handleLogout = () => {\n    logout();\n    navigate(\"/login\");\n  };\n  const [transactions, Settransactions] = useState([]);\n  const fetchData = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/api/gettransaction', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: currentUser.email\n        })\n      });\n      const data = await response.json();\n      Settransactions(data);\n    } catch (error) {\n      console.log(\"error\", error);\n    }\n  };\n  fetchData()\n  var total = 0;\n  const balance = () => {\n    transactions.map(transaction => {\n      if (transaction.type === \"Expense\") {\n        total = total - transaction.amount;\n      }\n      else {\n        total = total + transaction.amount;\n      }\n    });\n  }\n  balance();\n\n  return (\n    <>\n      <Card className={classes.root}>\n        <Button variant=\"outlined\" color='primary' onClick={handleLogout} style={{ margin: \"5px\" }}>Signout - {currentUser.email}</Button>\n        <CardHeader title=\"Money Tracker\" align=\"center\" />\n        <CardContent>\n          <Typography align=\"center\" variant=\"h5\">Total Balance ${total}</Typography>\n          <Typography variant=\"subtitle1\" style={{ lineHeight: '1.5em', marginTop: '20px' }}>\n            <InfoCard />\n          </Typography>\n          <Divider className={classes.divider} />\n          <Form />\n        </CardContent>\n        <CardContent className={classes.cartContent}>\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <List />\n            </Grid>\n          </Grid>\n        </CardContent>\n      </Card>\n    </>\n  );\n};\n\nexport default ExpenseTracker;\n","/home/parshwa/Downloads/project/Money-tracker-main/src/components/Snackbar/Snackbar.jsx",[],"/home/parshwa/Downloads/project/Money-tracker-main/src/components/Snackbar/styles.js",[],"/home/parshwa/Downloads/project/Money-tracker-main/src/components/Main/styles.js",[],"/home/parshwa/Downloads/project/Money-tracker-main/src/components/Details/styles.js",[],"/home/parshwa/Downloads/project/Money-tracker-main/src/useTransactions.js",[],"/home/parshwa/Downloads/project/Money-tracker-main/src/components/Main/List/List.jsx",[],"/home/parshwa/Downloads/project/Money-tracker-main/src/components/Main/Form/Form.jsx",["103","104"],"import React, { useState, useEffect } from 'react';\nimport { TextField, Typography, Grid, Button, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\nimport { CSVLink } from 'react-csv';\nimport { useSpeechContext } from '@speechly/react-client';\nimport Snackbar from '../../Snackbar/Snackbar';\nimport formatDate from '../../../utils/formatDate';\nimport { incomeCategories, expenseCategories } from '../../../constants/categories';\nimport useStyles from './styles';\nimport { useAuth } from '../../../context/AuthContext';\n\nconst initialState = {\n  amount: '',\n  category: '',\n  type: 'Income',\n  date: formatDate(new Date()),\n};\n\nconst NewTransactionForm = () => {\n  const classes = useStyles();\n  const [formData, setFormData] = useState(initialState);\n  const { segment } = useSpeechContext();\n  const [open, setOpen] = React.useState(false);\n  const { currentUser } = useAuth();\n  const [transactions, Settransactions] = useState([]);\n  const fetchData = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/api/gettransaction', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: currentUser.email\n        })\n      });\n      const data = await response.json();\n      Settransactions(data)\n    } catch (error) {\n      console.log(\"error\", error);\n    }\n  };\n  fetchData();\n\n  const createTransaction = () => {\n    if (Number.isNaN(Number(formData.amount)) || !formData.date.includes('-')) return;\n\n    if (incomeCategories.map((iC) => iC.type).includes(formData.category)) {\n      setFormData({ ...formData, type: 'Income' });\n    } else if (expenseCategories.map((iC) => iC.type).includes(formData.category)) {\n      setFormData({ ...formData, type: 'Expense' });\n    }\n\n    setOpen(true);\n    setFormData({ ...formData, amount: Number(formData.amount) });\n    addtransaction();\n    setFormData(initialState);\n  };\n  const addtransaction = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/api/addtransaction', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: currentUser.email,\n          amount: formData.amount,\n          category: formData.category,\n          type: formData.type,\n          date: formData.date\n        })\n      });\n    } catch (error) {\n      console.log(\"error\", error);\n    }\n  }\n  useEffect(() => {\n    if (segment) {\n      if (segment.intent.intent === 'add_expense') {\n        setFormData({ ...formData, type: 'Expense' });\n      } else if (segment.intent.intent === 'add_income') {\n        setFormData({ ...formData, type: 'Income' });\n      } else if (segment.isFinal && segment.intent.intent === 'create_transaction') {\n        return createTransaction();\n      } else if (segment.isFinal && segment.intent.intent === 'cancel_transaction') {\n        return setFormData(initialState);\n      }\n\n      segment.entities.forEach((s) => {\n        const category = `${s.value.charAt(0)}${s.value.slice(1).toLowerCase()}`;\n\n        switch (s.type) {\n          case 'amount':\n            setFormData({ ...formData, amount: s.value });\n            break;\n          case 'category':\n            if (incomeCategories.map((iC) => iC.type).includes(category)) {\n              setFormData({ ...formData, type: 'Income', category });\n            } else if (expenseCategories.map((iC) => iC.type).includes(category)) {\n              setFormData({ ...formData, type: 'Expense', category });\n            }\n            break;\n          case 'date':\n            setFormData({ ...formData, date: s.value });\n            break;\n          default:\n            break;\n        }\n      });\n\n      if (segment.isFinal && formData.amount && formData.category && formData.type && formData.date) {\n        createTransaction();\n      }\n    }\n  }, [segment]);\n\n  const selectedCategories = formData.type === 'Income' ? incomeCategories : expenseCategories;\n  return (\n    <Grid container spacing={2}>\n      <Snackbar open={open} setOpen={setOpen} />\n      <Grid item xs={12}>\n        <Typography align=\"center\" variant=\"subtitle2\" gutterBottom>\n          {segment ? (\n            <div className=\"segment\">\n              {segment.words.map((w) => w.value).join(\" \")}\n            </div>\n          ) : null}\n          {/* {isSpeaking ? <BigTranscript /> : 'Start adding transactions'}  */}\n        </Typography>\n      </Grid>\n      <Grid item xs={6}>\n        <FormControl fullWidth>\n          <InputLabel>Type</InputLabel>\n          <Select value={formData.type} onChange={(e) => setFormData({ ...formData, type: e.target.value })}>\n            <MenuItem value=\"Income\">Income</MenuItem>\n            <MenuItem value=\"Expense\">Expense</MenuItem>\n          </Select>\n        </FormControl>\n      </Grid>\n      <Grid item xs={6}>\n        <FormControl fullWidth>\n          <InputLabel>Category</InputLabel>\n          <Select value={formData.category} onChange={(e) => setFormData({ ...formData, category: e.target.value })}>\n            {selectedCategories.map((c) => <MenuItem key={c.type} value={c.type}>{c.type}</MenuItem>)}\n          </Select>\n        </FormControl>\n      </Grid>\n\n      <Grid item xs={6}>\n        <TextField type=\"number\" label=\"Amount\" value={formData.amount} onChange={(e) => setFormData({ ...formData, amount: e.target.value })} fullWidth />\n      </Grid>\n      <Grid item xs={6}>\n        <TextField fullWidth label=\"Date\" type=\"date\" value={formData.date} onChange={(e) => setFormData({ ...formData, date: formatDate(e.target.value) })} />\n      </Grid>\n      <Button className={classes.button} variant=\"outlined\" color=\"primary\" fullWidth onClick={createTransaction}>Create</Button>\n      <Button className={classes.button} variant=\"outlined\" color=\"primary\" fullWidth><CSVLink data={transactions} style={{ textDecoration: \"none\" }}>Download Transaction History</CSVLink></Button>\n    </Grid>\n  );\n};\n\nexport default NewTransactionForm;\n","/home/parshwa/Downloads/project/Money-tracker-main/src/constants/categories.js",[],"/home/parshwa/Downloads/project/Money-tracker-main/src/components/Main/List/styles.js",[],"/home/parshwa/Downloads/project/Money-tracker-main/src/components/Main/Form/styles.js",[],"/home/parshwa/Downloads/project/Money-tracker-main/src/utils/formatDate.js",["105"],"export default (date) => {\n  const d = new Date(date);\n  let month = `${d.getMonth() + 1}`;\n  let day = `${d.getDate()}`;\n  const year = d.getFullYear();\n\n  if (month.length < 2) { month = `0${month}`; }\n  if (day.length < 2) { day = `0${day}`; }\n\n  return [year, month, day].join('-');\n};\n",{"ruleId":"106","severity":1,"message":"107","line":1,"column":17,"nodeType":"108","messageId":"109","endLine":1,"endColumn":26},{"ruleId":"106","severity":1,"message":"110","line":3,"column":10,"nodeType":"108","messageId":"109","endLine":3,"endColumn":21},{"ruleId":"106","severity":1,"message":"111","line":11,"column":13,"nodeType":"108","messageId":"109","endLine":11,"endColumn":24},{"ruleId":"106","severity":1,"message":"112","line":14,"column":11,"nodeType":"108","messageId":"109","endLine":14,"endColumn":24},{"ruleId":"113","severity":1,"message":"114","line":39,"column":34,"nodeType":"115","messageId":"116","endLine":39,"endColumn":36},{"ruleId":"106","severity":1,"message":"117","line":60,"column":13,"nodeType":"108","messageId":"109","endLine":60,"endColumn":21},{"ruleId":"118","severity":1,"message":"119","line":115,"column":6,"nodeType":"120","endLine":115,"endColumn":15,"suggestions":"121"},{"ruleId":"122","severity":1,"message":"123","line":1,"column":1,"nodeType":"124","endLine":11,"endColumn":3},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'SpeechState' is defined but never used.","'speechState' is assigned a value but never used.","'executeScroll' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'response' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'createTransaction' and 'formData'. Either include them or remove the dependency array. You can also do a functional update 'setFormData(f => ...)' if you only need 'formData' in the 'setFormData' call.","ArrayExpression",["125"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration",{"desc":"126","fix":"127"},"Update the dependencies array to be: [createTransaction, formData, segment]",{"range":"128","text":"129"},[3922,3931],"[createTransaction, formData, segment]"]