{"ast":null,"code":"var _jsxFileName = \"/home/parshwa/Downloads/project/Money-tracker-main/frontend/src/components/Main/Form/Form.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { TextField, Typography, Grid, Button, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\nimport { CSVLink } from 'react-csv';\nimport { useSpeechContext } from '@speechly/react-client';\nimport Snackbar from '../../Snackbar/Snackbar';\nimport formatDate from '../../../utils/formatDate';\nimport { incomeCategories, expenseCategories } from '../../../constants/categories';\nimport useStyles from './styles';\nimport { useAuth } from '../../../context/AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  amount: '',\n  category: '',\n  type: 'Income',\n  date: formatDate(new Date())\n};\n\nconst NewTransactionForm = () => {\n  _s();\n\n  const classes = useStyles();\n  const [formData, setFormData] = useState(initialState);\n  const {\n    segment\n  } = useSpeechContext();\n  const [open, setOpen] = React.useState(false);\n  const {\n    currentUser\n  } = useAuth();\n  const [transactions, Settransactions] = useState([]);\n\n  const fetchData = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/api/gettransaction', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: currentUser.email\n        })\n      });\n      const data = await response.json();\n      Settransactions(data);\n    } catch (error) {\n      console.log(\"error\", error);\n    }\n  };\n\n  fetchData();\n\n  const createTransaction = () => {\n    if (Number.isNaN(Number(formData.amount)) || !formData.date.includes('-')) return;\n\n    if (incomeCategories.map(iC => iC.type).includes(formData.category)) {\n      setFormData({ ...formData,\n        type: 'Income'\n      });\n    } else if (expenseCategories.map(iC => iC.type).includes(formData.category)) {\n      setFormData({ ...formData,\n        type: 'Expense'\n      });\n    }\n\n    setOpen(true);\n    setFormData({ ...formData,\n      amount: Number(formData.amount)\n    });\n    addtransaction();\n    setFormData(initialState);\n  };\n\n  const addtransaction = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/api/addtransaction', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: currentUser.email,\n          amount: formData.amount,\n          category: formData.category,\n          type: formData.type,\n          date: formData.date\n        })\n      });\n    } catch (error) {\n      console.log(\"error\", error);\n    }\n  };\n\n  useEffect(() => {\n    if (segment) {\n      if (segment.intent.intent === 'add_expense') {\n        setFormData({ ...formData,\n          type: 'Expense'\n        });\n      } else if (segment.intent.intent === 'add_income') {\n        setFormData({ ...formData,\n          type: 'Income'\n        });\n      } else if (segment.isFinal && segment.intent.intent === 'create_transaction') {\n        return createTransaction();\n      } else if (segment.isFinal && segment.intent.intent === 'cancel_transaction') {\n        return setFormData(initialState);\n      }\n\n      segment.entities.forEach(s => {\n        const category = `${s.value.charAt(0)}${s.value.slice(1).toLowerCase()}`;\n\n        switch (s.type) {\n          case 'amount':\n            setFormData({ ...formData,\n              amount: s.value\n            });\n            break;\n\n          case 'category':\n            if (incomeCategories.map(iC => iC.type).includes(category)) {\n              setFormData({ ...formData,\n                type: 'Income',\n                category\n              });\n            } else if (expenseCategories.map(iC => iC.type).includes(category)) {\n              setFormData({ ...formData,\n                type: 'Expense',\n                category\n              });\n            }\n\n            break;\n\n          case 'date':\n            setFormData({ ...formData,\n              date: s.value\n            });\n            break;\n\n          default:\n            break;\n        }\n      });\n\n      if (segment.isFinal && formData.amount && formData.category && formData.type && formData.date) {\n        createTransaction();\n      }\n    }\n  }, [segment]);\n  const selectedCategories = formData.type === 'Income' ? incomeCategories : expenseCategories;\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    spacing: 2,\n    children: [/*#__PURE__*/_jsxDEV(Snackbar, {\n      open: open,\n      setOpen: setOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"center\",\n        variant: \"subtitle2\",\n        gutterBottom: true,\n        children: segment ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"segment\",\n          children: segment.words.map(w => w.value).join(\" \")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 6,\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        fullWidth: true,\n        children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n          children: \"Type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          value: formData.type,\n          onChange: e => setFormData({ ...formData,\n            type: e.target.value\n          }),\n          children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n            value: \"Income\",\n            children: \"Income\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: \"Expense\",\n            children: \"Expense\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 6,\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        fullWidth: true,\n        children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n          children: \"Category\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          value: formData.category,\n          onChange: e => setFormData({ ...formData,\n            category: e.target.value\n          }),\n          children: selectedCategories.map(c => /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: c.type,\n            children: c.type\n          }, c.type, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 44\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 6,\n      children: /*#__PURE__*/_jsxDEV(TextField, {\n        type: \"number\",\n        label: \"Amount\",\n        value: formData.amount,\n        onChange: e => setFormData({ ...formData,\n          amount: e.target.value\n        }),\n        fullWidth: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 6,\n      children: /*#__PURE__*/_jsxDEV(TextField, {\n        fullWidth: true,\n        label: \"Date\",\n        type: \"date\",\n        value: formData.date,\n        onChange: e => setFormData({ ...formData,\n          date: formatDate(e.target.value)\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: classes.button,\n      variant: \"outlined\",\n      color: \"primary\",\n      fullWidth: true,\n      onClick: createTransaction,\n      children: \"Create\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: classes.button,\n      variant: \"outlined\",\n      color: \"primary\",\n      fullWidth: true,\n      children: /*#__PURE__*/_jsxDEV(CSVLink, {\n        data: transactions,\n        style: {\n          textDecoration: \"none\"\n        },\n        children: \"Download Transaction History\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 87\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NewTransactionForm, \"2DmiTrG2CCZEf39M8hR+nc4UrwU=\", false, function () {\n  return [useStyles, useSpeechContext, useAuth];\n});\n\n_c = NewTransactionForm;\nexport default NewTransactionForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewTransactionForm\");","map":{"version":3,"sources":["/home/parshwa/Downloads/project/Money-tracker-main/frontend/src/components/Main/Form/Form.jsx"],"names":["React","useState","useEffect","TextField","Typography","Grid","Button","FormControl","InputLabel","Select","MenuItem","CSVLink","useSpeechContext","Snackbar","formatDate","incomeCategories","expenseCategories","useStyles","useAuth","initialState","amount","category","type","date","Date","NewTransactionForm","classes","formData","setFormData","segment","open","setOpen","currentUser","transactions","Settransactions","fetchData","response","fetch","method","headers","body","JSON","stringify","email","data","json","error","console","log","createTransaction","Number","isNaN","includes","map","iC","addtransaction","intent","isFinal","entities","forEach","s","value","charAt","slice","toLowerCase","selectedCategories","words","w","join","e","target","c","button","textDecoration"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { TextField, Typography, Grid, Button, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\nimport { CSVLink } from 'react-csv';\nimport { useSpeechContext } from '@speechly/react-client';\nimport Snackbar from '../../Snackbar/Snackbar';\nimport formatDate from '../../../utils/formatDate';\nimport { incomeCategories, expenseCategories } from '../../../constants/categories';\nimport useStyles from './styles';\nimport { useAuth } from '../../../context/AuthContext';\n\nconst initialState = {\n  amount: '',\n  category: '',\n  type: 'Income',\n  date: formatDate(new Date()),\n};\n\nconst NewTransactionForm = () => {\n  const classes = useStyles();\n  const [formData, setFormData] = useState(initialState);\n  const { segment } = useSpeechContext();\n  const [open, setOpen] = React.useState(false);\n  const { currentUser } = useAuth();\n  const [transactions, Settransactions] = useState([]);\n  const fetchData = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/api/gettransaction', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: currentUser.email\n        })\n      });\n      const data = await response.json();\n      Settransactions(data)\n    } catch (error) {\n      console.log(\"error\", error);\n    }\n  };\n  fetchData();\n\n  const createTransaction = () => {\n    if (Number.isNaN(Number(formData.amount)) || !formData.date.includes('-')) return;\n\n    if (incomeCategories.map((iC) => iC.type).includes(formData.category)) {\n      setFormData({ ...formData, type: 'Income' });\n    } else if (expenseCategories.map((iC) => iC.type).includes(formData.category)) {\n      setFormData({ ...formData, type: 'Expense' });\n    }\n\n    setOpen(true);\n    setFormData({ ...formData, amount: Number(formData.amount) });\n    addtransaction();\n    setFormData(initialState);\n  };\n  const addtransaction = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/api/addtransaction', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: currentUser.email,\n          amount: formData.amount,\n          category: formData.category,\n          type: formData.type,\n          date: formData.date\n        })\n      });\n    } catch (error) {\n      console.log(\"error\", error);\n    }\n  }\n  useEffect(() => {\n    if (segment) {\n      if (segment.intent.intent === 'add_expense') {\n        setFormData({ ...formData, type: 'Expense' });\n      } else if (segment.intent.intent === 'add_income') {\n        setFormData({ ...formData, type: 'Income' });\n      } else if (segment.isFinal && segment.intent.intent === 'create_transaction') {\n        return createTransaction();\n      } else if (segment.isFinal && segment.intent.intent === 'cancel_transaction') {\n        return setFormData(initialState);\n      }\n\n      segment.entities.forEach((s) => {\n        const category = `${s.value.charAt(0)}${s.value.slice(1).toLowerCase()}`;\n\n        switch (s.type) {\n          case 'amount':\n            setFormData({ ...formData, amount: s.value });\n            break;\n          case 'category':\n            if (incomeCategories.map((iC) => iC.type).includes(category)) {\n              setFormData({ ...formData, type: 'Income', category });\n            } else if (expenseCategories.map((iC) => iC.type).includes(category)) {\n              setFormData({ ...formData, type: 'Expense', category });\n            }\n            break;\n          case 'date':\n            setFormData({ ...formData, date: s.value });\n            break;\n          default:\n            break;\n        }\n      });\n\n      if (segment.isFinal && formData.amount && formData.category && formData.type && formData.date) {\n        createTransaction();\n      }\n    }\n  }, [segment]);\n\n  const selectedCategories = formData.type === 'Income' ? incomeCategories : expenseCategories;\n  return (\n    <Grid container spacing={2}>\n      <Snackbar open={open} setOpen={setOpen} />\n      <Grid item xs={12}>\n        <Typography align=\"center\" variant=\"subtitle2\" gutterBottom>\n          {segment ? (\n            <div className=\"segment\">\n              {segment.words.map((w) => w.value).join(\" \")}\n            </div>\n          ) : null}\n          {/* {isSpeaking ? <BigTranscript /> : 'Start adding transactions'}  */}\n        </Typography>\n      </Grid>\n      <Grid item xs={6}>\n        <FormControl fullWidth>\n          <InputLabel>Type</InputLabel>\n          <Select value={formData.type} onChange={(e) => setFormData({ ...formData, type: e.target.value })}>\n            <MenuItem value=\"Income\">Income</MenuItem>\n            <MenuItem value=\"Expense\">Expense</MenuItem>\n          </Select>\n        </FormControl>\n      </Grid>\n      <Grid item xs={6}>\n        <FormControl fullWidth>\n          <InputLabel>Category</InputLabel>\n          <Select value={formData.category} onChange={(e) => setFormData({ ...formData, category: e.target.value })}>\n            {selectedCategories.map((c) => <MenuItem key={c.type} value={c.type}>{c.type}</MenuItem>)}\n          </Select>\n        </FormControl>\n      </Grid>\n\n      <Grid item xs={6}>\n        <TextField type=\"number\" label=\"Amount\" value={formData.amount} onChange={(e) => setFormData({ ...formData, amount: e.target.value })} fullWidth />\n      </Grid>\n      <Grid item xs={6}>\n        <TextField fullWidth label=\"Date\" type=\"date\" value={formData.date} onChange={(e) => setFormData({ ...formData, date: formatDate(e.target.value) })} />\n      </Grid>\n      <Button className={classes.button} variant=\"outlined\" color=\"primary\" fullWidth onClick={createTransaction}>Create</Button>\n      <Button className={classes.button} variant=\"outlined\" color=\"primary\" fullWidth><CSVLink data={transactions} style={{ textDecoration: \"none\" }}>Download Transaction History</CSVLink></Button>\n    </Grid>\n  );\n};\n\nexport default NewTransactionForm;\n"]},"metadata":{},"sourceType":"module"}