{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { useAuth } from './context/AuthContext';\nimport { incomeCategories, expenseCategories, resetCategories } from './constants/categories';\n\nconst useTransactions = title => {\n  _s();\n\n  resetCategories();\n  const {\n    currentUser\n  } = useAuth();\n  const [transactions, setTransactions] = useState([]);\n\n  const fetchData = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/api/gettransaction', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: currentUser.email\n        })\n      });\n      const data = await response.json();\n      setTransactions(data);\n    } catch (error) {\n      console.log(\"error\", error);\n    }\n  };\n\n  fetchData();\n  const rightTransactions = transactions.filter(t => t.type === title);\n  const total = rightTransactions.reduce((acc, curr) => {\n    return acc + curr.amount;\n  }, 0);\n  const categories = title === 'Income' ? incomeCategories : expenseCategories;\n  rightTransactions.forEach(t => {\n    const category = categories.find(c => c.type === t.category);\n    if (category) category.amount += t.amount;\n  });\n  const filteredCategories = categories.filter(sc => sc.amount > 0);\n  const chartData = {\n    datasets: [{\n      data: filteredCategories.map(c => c.amount),\n      backgroundColor: filteredCategories.map(c => c.color)\n    }],\n    labels: filteredCategories.map(c => c.type)\n  };\n  return {\n    filteredCategories,\n    total,\n    chartData\n  };\n};\n\n_s(useTransactions, \"iv+U2rIKOdiN/5LeQqa8pRNDS54=\", false, function () {\n  return [useAuth];\n});\n\nexport default useTransactions;","map":{"version":3,"sources":["/home/parshwa/Downloads/project/Money-tracker-main/src/useTransactions.js"],"names":["useState","useAuth","incomeCategories","expenseCategories","resetCategories","useTransactions","title","currentUser","transactions","setTransactions","fetchData","response","fetch","method","headers","body","JSON","stringify","email","data","json","error","console","log","rightTransactions","filter","t","type","total","reduce","acc","curr","amount","categories","forEach","category","find","c","filteredCategories","sc","chartData","datasets","map","backgroundColor","color","labels"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,OAAT,QAAwB,uBAAxB;AACA,SAASC,gBAAT,EAA2BC,iBAA3B,EAA8CC,eAA9C,QAAqE,wBAArE;;AAEA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AAAA;;AACjCF,EAAAA,eAAe;AACf,QAAM;AAAEG,IAAAA;AAAF,MAAkBN,OAAO,EAA/B;AACA,QAAM,CAACO,YAAD,EAAeC,eAAf,IAAkCT,QAAQ,CAAC,EAAD,CAAhD;;AACA,QAAMU,SAAS,GAAG,YAAY;AAC5B,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,0CAAD,EAA6C;AACvEC,QAAAA,MAAM,EAAE,MAD+D;AAEvEC,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SAF8D;AAKvEC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnBC,UAAAA,KAAK,EAAEX,WAAW,CAACW;AADA,SAAf;AALiE,OAA7C,CAA5B;AASA,YAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAT,EAAnB;AACAX,MAAAA,eAAe,CAACU,IAAD,CAAf;AACD,KAZD,CAYE,OAAOE,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,KAArB;AACD;AACF,GAhBD;;AAiBAX,EAAAA,SAAS;AACT,QAAMc,iBAAiB,GAAGhB,YAAY,CAACiB,MAAb,CAAqBC,CAAD,IAAOA,CAAC,CAACC,IAAF,KAAWrB,KAAtC,CAA1B;AACA,QAAMsB,KAAK,GAAGJ,iBAAiB,CAACK,MAAlB,CAAyB,CAACC,GAAD,EAAMC,IAAN,KAAe;AACpD,WAAOD,GAAG,GAAGC,IAAI,CAACC,MAAlB;AACD,GAFa,EAEX,CAFW,CAAd;AAGA,QAAMC,UAAU,GAAG3B,KAAK,KAAK,QAAV,GAAqBJ,gBAArB,GAAwCC,iBAA3D;AAEAqB,EAAAA,iBAAiB,CAACU,OAAlB,CAA2BR,CAAD,IAAO;AAC/B,UAAMS,QAAQ,GAAGF,UAAU,CAACG,IAAX,CAAiBC,CAAD,IAAOA,CAAC,CAACV,IAAF,KAAWD,CAAC,CAACS,QAApC,CAAjB;AAEA,QAAIA,QAAJ,EAAcA,QAAQ,CAACH,MAAT,IAAmBN,CAAC,CAACM,MAArB;AACf,GAJD;AAMA,QAAMM,kBAAkB,GAAGL,UAAU,CAACR,MAAX,CAAmBc,EAAD,IAAQA,EAAE,CAACP,MAAH,GAAY,CAAtC,CAA3B;AAEA,QAAMQ,SAAS,GAAG;AAChBC,IAAAA,QAAQ,EAAE,CAAC;AACTtB,MAAAA,IAAI,EAAEmB,kBAAkB,CAACI,GAAnB,CAAwBL,CAAD,IAAOA,CAAC,CAACL,MAAhC,CADG;AAETW,MAAAA,eAAe,EAAEL,kBAAkB,CAACI,GAAnB,CAAwBL,CAAD,IAAOA,CAAC,CAACO,KAAhC;AAFR,KAAD,CADM;AAKhBC,IAAAA,MAAM,EAAEP,kBAAkB,CAACI,GAAnB,CAAwBL,CAAD,IAAOA,CAAC,CAACV,IAAhC;AALQ,GAAlB;AAQA,SAAO;AAAEW,IAAAA,kBAAF;AAAsBV,IAAAA,KAAtB;AAA6BY,IAAAA;AAA7B,GAAP;AACD,CA7CD;;GAAMnC,e;UAEoBJ,O;;;AA6C1B,eAAeI,eAAf","sourcesContent":["import { useState } from 'react';\nimport { useAuth } from './context/AuthContext';\nimport { incomeCategories, expenseCategories, resetCategories } from './constants/categories';\n\nconst useTransactions = (title) => {\n  resetCategories();\n  const { currentUser } = useAuth();\n  const [transactions, setTransactions] = useState([]);\n  const fetchData = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/api/gettransaction', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: currentUser.email\n        })\n      });\n      const data = await response.json();\n      setTransactions(data);\n    } catch (error) {\n      console.log(\"error\", error);\n    }\n  };\n  fetchData()\n  const rightTransactions = transactions.filter((t) => t.type === title);\n  const total = rightTransactions.reduce((acc, curr) => {\n    return acc + curr.amount;\n  }, 0);\n  const categories = title === 'Income' ? incomeCategories : expenseCategories;\n\n  rightTransactions.forEach((t) => {\n    const category = categories.find((c) => c.type === t.category);\n\n    if (category) category.amount += t.amount;\n  });\n\n  const filteredCategories = categories.filter((sc) => sc.amount > 0);\n\n  const chartData = {\n    datasets: [{\n      data: filteredCategories.map((c) => c.amount),\n      backgroundColor: filteredCategories.map((c) => c.color),\n    }],\n    labels: filteredCategories.map((c) => c.type),\n  };\n\n  return { filteredCategories, total, chartData };\n};\n\nexport default useTransactions;\n"]},"metadata":{},"sourceType":"module"}